from aiogram.types import (
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton, WebAppInfo,
)
import app.database.request as rq
from aiogram.utils.keyboard import InlineKeyboardBuilder

main = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üìö –û–±—É—á–µ–Ω–∏–µ", callback_data="study")],
        [InlineKeyboardButton(text="üíª –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton(text="üì¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
    ]
)

study = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üìô –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è", callback_data="individual"
            )
        ],
        [InlineKeyboardButton(text="üìó –û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã", callback_data="cours")],
        [InlineKeyboardButton(text="üö´ –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
    ]
)

individual_back = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="üö´ –ù–∞–∑–∞–¥", callback_data="to_study_menu")
                      ]]
)

# profile = InlineKeyboardMarkup(
#     inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
# )
#
# support = InlineKeyboardMarkup(
#     inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
# )

main_admin = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ö—É—Ä—Å—ã", callback_data="cours_admin")],
    ]
)


async def get_courses_admin():
    all_courses = await rq.get_courses_admin()
    keyboard = InlineKeyboardBuilder()
    if all_courses:
        for cours in all_courses:
            keyboard.add(
                InlineKeyboardButton(
                    text=cours.name, callback_data=f"coursAdmin_{cours.id}"
                )
            )
    keyboard.add(InlineKeyboardButton(text="+ –ù–æ–≤—ã–π –∫—É—Ä—Å", callback_data="add_cours"))
    keyboard.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))
    return keyboard.adjust(1).as_markup()


cuors_active_or_not = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="active_no")],
        [InlineKeyboardButton(text="–î–∞", callback_data="active_ye")],
        [InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å", callback_data="active_back")],
    ]
)


cuors_online_or_record = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–ø–∏—Å—å", callback_data="online_record")],
        [InlineKeyboardButton(text="–û–Ω–ª–∞–π–Ω", callback_data="online_online")],
        [InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å", callback_data="online_back")],
    ]
)

otmena = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å")],
    ]
)


async def get_courses():
    all_courses = await rq.get_courses()
    keyboard = InlineKeyboardBuilder()
    if all_courses:
        for cours in all_courses:
            keyboard.add(
                InlineKeyboardButton(text=cours.name, callback_data=f"cours_{cours.id}")
            )
    keyboard.add(InlineKeyboardButton(text="üö´ –ù–∞–∑–∞–¥", callback_data="to_study_menu"))
    return keyboard.adjust(1).as_markup()


async def buy_cours(id):
    keyboard = InlineKeyboardBuilder()
    cours = await rq.get_url_cours(id)

    keyboard.add(
        InlineKeyboardButton(text="üîé –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ", web_app=WebAppInfo(url=f"{cours.url}")),
    )
    keyboard.add(
        InlineKeyboardButton(text="üö´ –ù–∞–∑–∞–¥", callback_data="back"),
    )

    return keyboard.adjust(1).as_markup()


async def edit_list(id, message_id):
    keyboard = InlineKeyboardBuilder()
    cours = await rq.get_cours(id)
    keyboard.add(
        InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"editName_{id}"),
        InlineKeyboardButton(
            text="–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"editDescription_{id}"
        ),
        InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"editPrice_{id}"),
        InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"editDates_{id}"),
        InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–≤—å—é", callback_data=f"editImage_{id}"),
        InlineKeyboardButton(
            text=f"–ê–∫—Ç–∏–≤–Ω—ã–π: {cours.active}",
            callback_data=f"editActive_{id}",
        ),
        InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å", callback_data=f"delete_cours_{id}"),
    )
    keyboard.add(
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"),
    )
    return keyboard.adjust(1).as_markup()


back = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="üö´ –ù–∞–∑–∞–¥", callback_data="back")]]
)
