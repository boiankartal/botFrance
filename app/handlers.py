from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

router = Router()
import app.keyboards as kb
import app.database.requests as rq

url_bot = "https://t.me/frantessstbot"


# FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
class Add_cours(StatesGroup):
    name = State()
    description = State()
    img_id = State()
    price = State()
    active = State()
    online_or_record = State()


class editName(StatesGroup):
    new_name = State()
    id = State()
    callback = State()


class editDescription(StatesGroup):
    new_description = State()
    id = State()
    callback = State()


class editPrice(StatesGroup):
    new_price = State()
    id = State()
    callback = State()


@router.message(Command("start"))
async def start(message: Message):
    await rq.set_user(message.from_user.id)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å")

    await main(message)
    if "coursID" in message.text:
        id = message.text.split("_")[1]
        await get_url_cours(id, message)


async def get_url_cours(id, message):
    id_cours = id
    cours = await rq.get_cours(id_cours)
    if cours.online_or_record == "–û–Ω–ª–∞–π–Ω":
        text = f"–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –∫—É—Ä—Å–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ, –≥–¥–µ –≤—ã –±—É–¥–µ—Ç–µ:\n 1. –û–±—â–∞—Ç—å—Å—è —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º\n 2. –ü–æ–ª—É—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏—è—Ö\n 3. ...."
    if cours.online_or_record == "–ó–∞–ø–∏—Å—å":
        text = f"–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∞—Ä—Ö–∏–≤ —Å –∫—É—Ä—Å–æ–º"

    await message.answer_photo(
        photo=cours.img_tg_id,
        caption=f"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ*\n\n*–ù–∞–∑–≤–∞–Ω–∏–µ:* {cours.name}\n\n*–û–ø–∏—Å–∞–Ω–∏–µ:*\n{cours.description}\n\n*–û–Ω–ª–∞–π–Ω/–ó–∞–ø–∏—Å—å:* {cours.online_or_record}\n\n*–¶–µ–Ω–∞:* {cours.price}—Ä \n\n`{text}`",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=await kb.buy_cours(cours.id),
    )


async def main(message):
    await message.answer(text="ü•ê –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.main)


@router.callback_query(F.data == "cours")
async def get_courses(callback: CallbackQuery):
    await callback.message.answer(
        "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤", reply_markup=await kb.get_courses()
    )


@router.message(Command("admin_123"))
async def admin_menu(message: Message):
    await message.answer("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞", reply_markup=kb.main_admin)


@router.callback_query(F.data == "cours_admin")
async def get_courses_admin(callback: CallbackQuery):
    await callback.message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã", reply_markup=await kb.get_courses_admin()
    )


@router.callback_query(F.data == "back")
async def cmd_back(callback: CallbackQuery):
    await callback.message.delete()


@router.callback_query(F.data == "add_cours")
async def add_cours(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.set_state(Add_cours.name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞", reply_markup=kb.otmena)


@router.message(Add_cours.name)
async def add_cours_discriprion(message: Message, state: FSMContext):
    if message.text == "–°–±—Ä–æ—Å–∏—Ç—å":
        await state.clear()
        await message.answer(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤–≤–µ–¥–∏—Ç–µ /admin_123",
            reply_markup=ReplyKeyboardRemove(),
        )
    else:
        await state.update_data(name=message.text)
        await state.set_state(Add_cours.description)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞", reply_markup=kb.otmena)


@router.message(Add_cours.description)
async def add_cours_descriprion(message: Message, state: FSMContext):
    if message.text == "–°–±—Ä–æ—Å–∏—Ç—å":
        await state.clear()
        await message.answer(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤–≤–µ–¥–∏—Ç–µ /admin_123",
            reply_markup=ReplyKeyboardRemove(),
        )
    else:
        await state.update_data(description=message.text)
        await state.set_state(Add_cours.img_id)
        await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–µ–≤—å—é –∫—É—Ä—Å–∞ (—Ñ–æ—Ç–æ)", reply_markup=kb.otmena)


@router.message(Add_cours.img_id)
async def add_cours_discriprion(message: Message, state: FSMContext):
    if message.text == "–°–±—Ä–æ—Å–∏—Ç—å":
        await state.clear()
        await message.answer(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤–≤–µ–¥–∏—Ç–µ /admin_123",
            reply_markup=ReplyKeyboardRemove(),
        )
    else:
        await state.update_data(img_id=message.photo[-1].file_id)
        await state.set_state(Add_cours.price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∫—É—Ä—Å–∞", reply_markup=kb.otmena)


@router.message(Add_cours.price)
async def add_cours_discriprion(message: Message, state: FSMContext):
    if message.text == "–°–±—Ä–æ—Å–∏—Ç—å":
        await state.clear()
        await message.answer(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤–≤–µ–¥–∏—Ç–µ /admin_123",
            reply_markup=ReplyKeyboardRemove(),
        )
    else:
        await state.update_data(price=message.text)
        await state.set_state(Add_cours.active)
        await message.answer(
            "–ë—É–¥–µ—Ç –ª–∏ –∫—É—Ä—Å —Å—Ä–∞–∑—É –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –î–∞/–ù–µ—Ç",
            reply_markup=kb.cuors_active_or_not,
        )


@router.message(Add_cours.active)
async def add_cours_discriprion(message: Message, state: FSMContext):
    if message.text == "–°–±—Ä–æ—Å–∏—Ç—å":
        await state.clear()
        await message.answer(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤–≤–µ–¥–∏—Ç–µ /admin_123",
            reply_markup=ReplyKeyboardRemove(),
        )
    else:
        await state.update_data(active=message.text)
        await state.set_state(Add_cours.online_or_record)
        await message.answer(
            "–ë—É–¥–µ—Ç –ª–∏ –∫—É—Ä—Å –≤ –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –æ–Ω–ª–∞–π–Ω? –ó–∞–ø–∏—Å—å/–û–Ω–ª–∞–π–Ω",
            reply_markup=kb.cuors_online_or_record,
        )


@router.message(Add_cours.online_or_record)
async def add_cours_discriprion(message: Message, state: FSMContext):
    if message.text == "–°–±—Ä–æ—Å–∏—Ç—å":
        await state.clear()
        await message.answer(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤–≤–µ–¥–∏—Ç–µ /admin_123",
            reply_markup=ReplyKeyboardRemove(),
        )
    else:
        await state.update_data(online_or_record=message.text)
        data = await state.get_data()
        status = await rq.set_new_cours(data)
        if status == 200:
            text = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫—É—Ä—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        else:
            text = "–û—à–∏–±–∫–∞!!!"
        await message.answer(text, reply_markup=ReplyKeyboardRemove())

    await admin_menu(message)


@router.callback_query(F.data.startswith("cours_"))
async def get_cours(callback: CallbackQuery):
    id_cours = callback.data.split("_")[1]
    cours = await rq.get_cours(id_cours)
    if cours.online_or_record == "–û–Ω–ª–∞–π–Ω":
        text = f"–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –∫—É—Ä—Å–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ, –≥–¥–µ –≤—ã –±—É–¥–µ—Ç–µ:\n 1. –û–±—â–∞—Ç—å—Å—è —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º\n 2. –ü–æ–ª—É—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏—è—Ö\n 3. ...."
    if cours.online_or_record == "–ó–∞–ø–∏—Å—å":
        text = f"–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∞—Ä—Ö–∏–≤ —Å –∫—É—Ä—Å–æ–º"

    await callback.message.answer_photo(
        photo=cours.img_tg_id,
        caption=f"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ*\n\n*–ù–∞–∑–≤–∞–Ω–∏–µ:* {cours.name}\n\n*–û–ø–∏—Å–∞–Ω–∏–µ:*\n{cours.description}\n\n*–û–Ω–ª–∞–π–Ω/–ó–∞–ø–∏—Å—å:* {cours.online_or_record}\n\n*–¶–µ–Ω–∞:* {cours.price}—Ä \n\n`{text}`",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=await kb.buy_cours(cours.id),
    )


@router.callback_query(F.data.startswith("coursAdmin"))
async def get_cours_admin(callback: CallbackQuery):
    id_cours = callback.data.split("_")[1]
    cours = await rq.get_cours(id_cours)
    url = url_bot + f"?start=coursID_{cours.id}"
    await callback.message.answer_photo(
        photo=cours.img_tg_id,
        caption=f"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ*\n\n*–ù–∞–∑–≤–∞–Ω–∏–µ:* {cours.name}\n\n*–û–ø–∏—Å–∞–Ω–∏–µ:*\n{cours.description}\n\n*–û–Ω–ª–∞–π–Ω/–ó–∞–ø–∏—Å—å:* {cours.online_or_record}\n\n*–¶–µ–Ω–∞:* {cours.price}—Ä\n\n*–°—Å—ã–ª–∫–∞ –Ω–∞ –∫—É—Ä—Å:*\n`{url}`",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=await kb.edit_list(cours.id, callback.message.message_id),
    )


@router.callback_query(F.data.startswith("editActive"))
async def editActive(callback: CallbackQuery):
    await rq.editActive(callback.data.split("_")[1])
    await callback.message.delete()
    await get_cours_admin(callback)


@router.callback_query(F.data.startswith("delete_cours"))
async def delete_cours(callback: CallbackQuery):
    await rq.delete_cours(callback.data.split("_")[2])
    await callback.message.delete()
    await callback.message.answer("–ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    await get_courses_admin(callback)


@router.callback_query(F.data.startswith("editName"))
async def editName_1(callback: CallbackQuery, state: FSMContext):
    await state.set_state(editName.id)
    await state.update_data(id=callback.data.split("_")[1])
    await state.set_state(editName.callback)
    await state.update_data(callback=callback)
    await state.set_state(editName.new_name)
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è")


@router.message(editName.new_name)
async def editName_update(message: Message, state: FSMContext):
    await state.update_data(new_name=message.text)
    data = await state.get_data()
    await state.clear()
    status = await rq.editName(data["id"], data["new_name"])
    await message.answer("–£—Å–ø–µ—à–Ω–æ!!!")
    await get_courses_admin(data["callback"])


##########################################################################################
@router.callback_query(F.data.startswith("editDescription"))
async def editDescription_1(callback: CallbackQuery, state: FSMContext):
    await state.set_state(editDescription.id)
    await state.update_data(id=callback.data.split("_")[1])
    await state.set_state(editDescription.callback)
    await state.update_data(callback=callback)
    await state.set_state(editDescription.new_description)
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞")


@router.message(editDescription.new_description)
async def editDescription_update(message: Message, state: FSMContext):
    await state.update_data(new_description=message.text)
    data = await state.get_data()
    await state.clear()
    status = await rq.editDescription(data["id"], data["new_description"])
    await message.answer("–£—Å–ø–µ—à–Ω–æ!!!")
    await get_courses_admin(data["callback"])


#######################################################################################################
@router.callback_query(F.data.startswith("editPrice"))
async def editPrice_1(callback: CallbackQuery, state: FSMContext):
    await state.set_state(editPrice.id)
    await state.update_data(id=callback.data.split("_")[1])
    await state.set_state(editPrice.callback)
    await state.update_data(callback=callback)
    await state.set_state(editPrice.new_price)
    await callback.message.answer("–£–∫–∞–∂–∏ –Ω–æ–≤—É—é —Ü–µ–Ω—É")


@router.message(editPrice.new_price)
async def editPrice_update(message: Message, state: FSMContext):
    await state.update_data(new_price=message.text)
    data = await state.get_data()
    await state.clear()
    status = await rq.editPrice(data["id"], data["new_price"])
    await message.answer("–£—Å–ø–µ—à–Ω–æ!!!")
    await get_courses_admin(data["callback"])


@router.callback_query(F.data == "profile")
async def profile(callback: CallbackQuery):
    user = await rq.get_user(callback.message.chat.id)
    cours = await rq.get_cours(user.cours)
    if not cours:
        text = ""
    else:
        text = cours.name
    await callback.message.answer(
        f"*–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n*–ò–º—è:* {callback.message.chat.full_name}\n\n*ID:* {user.tg_id}\n\n*–ö—É—Ä—Å:* {text}",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=kb.back,
    )


@router.callback_query(F.data == "support")
async def support(callback: CallbackQuery):
    await callback.message.answer(
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ @pawwvw",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=kb.back,
    )
